# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
#
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "fedora/35-cloud-base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "#{Dir.home}", "/mnt/home", type: 'nfs', nfs_udp: false

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider "libvirt" do |libvirt|
    libvirt.memory = "8192"
    libvirt.cpus = 4
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision :shell, privileged: false, inline: <<-SHELL

  # System configuration (runs as root)
  sudo setenforce 0
  sudo bash -c "echo SELINUX=permissive >/etc/selinux/config"

  sudo yum update -y
  sudo yum install -y ps mc vim gdb strace nfs-utils net-tools xfsprogs docker tmux git make wget bind-utils nfs-utils curl openssl gcc psmisc podman iscsi-initiator-utils bash-completion jq

  sudo yum module enable -y cri-o:1.22
  sudo yum install -y cri-o cri-tools

  sudo systemctl start crio
  sudo systemctl enable crio

  # Configure kubectl
  cat <<'EOF' | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
enabled=1
gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

  sudo yum install -y kubectl

  # Configure Go
  mkdir ~/bin || :
  curl -sL -o ~/bin/gimme https://raw.githubusercontent.com/travis-ci/gimme/master/gimme
  chmod +x ~/bin/gimme
  gimme stable >> ~/.bashrc
  echo "export GOPATH=~/go" >> ~/.bashrc

  # Setup kc alias and bash completion 
  echo "alias kc=$(which kubectl)" >> ~/.bashrc
  echo "source <(kubectl completion bash)" >> ~/.bashrc

  # Setup env vars for local-up-cluster.sh to use CRI-O
  echo "export CGROUP_DRIVER=systemd" >> ~/.bashrc
  echo "export CONTAINER_RUNTIME=remote" >> ~/.bashrc
  echo "export CONTAINER_RUNTIME_ENDPOINT='unix:///var/run/crio/crio.sock'" >> ~/.bashrc
  
  SHELL
end
